1:HL["/_next/static/css/9d8f288a99c54fb3.css","style",{"crossOrigin":""}]
0:["AzO8YmqLI-jVS4hv3vlbF",[[["",{"children":["posts",{"children":[["slug","2018-08-25-serverless-my-initial-setup-with-es6-testing-and-ci-deployment","d"],{"children":["__PAGE__?{\"slug\":\"2018-08-25-serverless-my-initial-setup-with-es6-testing-and-ci-deployment\"}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/9d8f288a99c54fb3.css","precedence":"next","crossOrigin":""}]],"$L3"]]]]
4:I[2286,["736","static/chunks/736-93d26bf9f492bada.js","545","static/chunks/545-972397648c423446.js","871","static/chunks/871-e93f475163439fcd.js","185","static/chunks/app/layout-58152a9375fe786b.js"],"ThemeProvider"]
5:I[7019,["736","static/chunks/736-93d26bf9f492bada.js","545","static/chunks/545-972397648c423446.js","871","static/chunks/871-e93f475163439fcd.js","185","static/chunks/app/layout-58152a9375fe786b.js"],"Header"]
6:I[3849,[],""]
7:I[8656,[],""]
8:I[4736,["736","static/chunks/736-93d26bf9f492bada.js","991","static/chunks/app/posts/page-6d06c0c42f2ef9eb.js"],""]
2:[null,["$","html",null,{"lang":"en","className":"h-full antialiased","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex h-full","children":["$","$L4",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":["$","div",null,{"className":"flex w-full","children":["$","div",null,{"className":"relative flex w-full flex-col","children":[["$","$L5",null,{}],["$","main",null,{"className":"flex-auto","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"sm:px-8 flex h-full items-center pt-16 sm:pt-32","children":["$","div",null,{"className":"mx-auto w-full max-w-7xl lg:px-8","children":["$","div",null,{"className":"relative px-4 sm:px-8 lg:px-12","children":["$","div",null,{"className":"mx-auto max-w-2xl lg:max-w-5xl","children":["$","div",null,{"className":"flex flex-col items-center","children":[["$","p",null,{"className":"text-base font-semibold text-zinc-400 dark:text-zinc-500","children":"404"}],["$","h1",null,{"className":"mt-4 text-4xl font-bold tracking-tight text-zinc-800 dark:text-zinc-100 sm:text-5xl","children":"Page not found"}],["$","p",null,{"className":"mt-4 text-base text-zinc-600 dark:text-zinc-400","children":"Sorry, we couldn’t find the page you’re looking for."}],["$","$L8",null,{"href":"/","children":["$","button",null,{"className":"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2 mt-4","children":"Go back home"}]}]]}]}]}]}]}],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children",["slug","2018-08-25-serverless-my-initial-setup-with-es6-testing-and-ci-deployment","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L9","$La",null],"segment":"__PAGE__?{\"slug\":\"2018-08-25-serverless-my-initial-setup-with-es6-testing-and-ci-deployment\"}"},"styles":null}],"segment":["slug","2018-08-25-serverless-my-initial-setup-with-es6-testing-and-ci-deployment","d"]},"styles":null}],"segment":"posts"},"styles":null}]}],["$","footer",null,{"className":"mt-32 flex-none","children":["$","div",null,{"className":"sm:px-8","children":["$","div",null,{"className":"mx-auto w-full max-w-7xl lg:px-8","children":["$","div",null,{"className":"pb-16 pt-10","children":["$","div",null,{"className":"relative px-4 sm:px-8 lg:px-12","children":["$","div",null,{"className":"mx-auto max-w-2xl lg:max-w-5xl","children":["$","div",null,{"className":"flex flex-col items-center justify-between gap-6 sm:flex-row","children":[["$","div",null,{"className":"flex flex-wrap justify-center gap-x-6 gap-y-1 text-sm font-medium text-zinc-800 dark:text-zinc-200","children":[["$","$L8",null,{"href":"/about","className":"transition hover:text-teal-500 dark:hover:text-teal-400","children":"About"}],["$","$L8",null,{"href":"/projects","className":"transition hover:text-teal-500 dark:hover:text-teal-400","children":"Projects"}],["$","$L8",null,{"href":"/speaking","className":"transition hover:text-teal-500 dark:hover:text-teal-400","children":"Speaking"}],["$","$L8",null,{"href":"/uses","className":"transition hover:text-teal-500 dark:hover:text-teal-400","children":"Uses"}]]}],["$","p",null,{"className":"text-sm text-zinc-400 dark:text-zinc-500","children":["© ",2023," Spencer Sharp. All rights reserved."]}]]}]}]}]}]}]}]}]]}]}]}]}]}],null]
b:T3189,<p>Basically before I start any serious project I like to have a few things setup:</p>
<ul>
<li>ES6/ES7 Webpack and Babel (From Starter)</li>
<li>A good offline dev workflow (From Starter)</li>
<li>ESLint</li>
<li>Folder structure</li>
<li>Testing</li>
</ul>
<p>I hope this isnt too obscure of a topic, but I'm not actually going to cover how to build a CRUD API, this is just an example starting boilerplate before you begin coding your project.</p>
<p>I'm assuming you've at least tried using the serverless framework before. If you are new to serverless, I have an article that breaks it down from the beginning here:</p>
<p><a href="/posts/serverless-back-end-for-react-your-introduction-to-serverless-architecture" title="/posts/serverless-back-end-for-react-your-introduction-to-serverless-architecture">Serverless Back-End for React - Your Introduction to Serverless Architecture</a></p>
<h3 id="the-starter"><a aria-hidden="true" tabindex="-1" href="#the-starter"><a href="#the-starter" style="margin-right: 10px">#</a></a>The Starter</h3>
<p>Lets start with the great <a href="https://serverless-stack.com/chapters/serverless-nodejs-starter.html" title="https://serverless-stack.com/chapters/serverless-nodejs-starter.html">Serverless Node.js Starter</a> (<a href="https://github.com/AnomalyInnovations/serverless-nodejs-starter" title="https://github.com/AnomalyInnovations/serverless-nodejs-starter">github</a>) from the awesome <a href="https://serverless-stack.com/" title="https://serverless-stack.com/">Serverless Stack</a> project. If you're not familiar with that project be sure to check it out.</p>
<p>The starter basically includes all this stuff (From the the <a href="https://serverless-stack.com/chapters/serverless-nodejs-starter.html" title="https://serverless-stack.com/chapters/serverless-nodejs-starter.html">starter description page</a>):</p>
<ul>
<li><strong>Use ES7 syntax in your handler functions</strong></li>
<li><strong>Package your functions using Webpack</strong></li>
<li><strong>Run API Gateway locally</strong>
<ul>
<li>Use <code>serverless offline start</code></li>
</ul>
</li>
<li><strong>Support for unit tests</strong>
<ul>
<li>Run <code>npm test</code> to run your tests</li>
</ul>
</li>
<li><strong>Sourcemaps for proper error messages</strong>
<ul>
<li>Error message show the correct line numbers</li>
<li>Works in production with CloudWatch</li>
</ul>
</li>
<li><strong>Automatic support for multiple handler files</strong>
<ul>
<li>No need to add a new entry to your <code>webpack.config.js</code></li>
</ul>
</li>
<li><strong>Add environment variables for your stages</strong></li>
</ul>
<p>If you dont use this starter, you have to add a lot of this stuff one by one by including and configuring the right packages and plugins. So this gives us a great place to start.</p>
<h3 id="create-a-new-project"><a aria-hidden="true" tabindex="-1" href="#create-a-new-project"><a href="#create-a-new-project" style="margin-right: 10px">#</a></a>Create a New Project</h3>
<p>First make sure you have the <code>serverless</code> module installed globally</p>
<pre><code>yarn global add serverless
# or
npm install serverless -g
</code></pre>
<p>And then run this command to create a new serverless project using the starter:</p>
<pre><code>$ serverless install --url https://github.com/AnomalyInnovations/serverless-nodejs-starter --name my-project
</code></pre>
<p>It gives us a <code>serverless.yml</code> file that looks like this:</p>
<pre><code>service: my-project

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
</code></pre>
<p>And a handler.js file that looks like this:</p>
<pre><code>export const hello = async (event, context, callback) => {
  const response = {
    statusCode: 200,
    body: JSON.stringify({
      message: `Go Serverless v1.0! ${(await message({ time: 1, copy: 'Your function executed successfully!'}))}`,
    }),
  };

  callback(null, response);
};

const message = ({ time, ...rest }) => new Promise((resolve, reject) => 
  setTimeout(() => {
    resolve(`${rest.copy} (with a delay)`);
  }, time * 1000)
);
</code></pre>
<p>It also gives us a test folder with an example test.</p>
<pre><code># tests/handler.test.js

import * as handler from '../handler';

test('hello', async () => {
  const event = 'event';
  const context = 'context';
  const callback = (error, response) => {
    expect(response.statusCode).toEqual(200);
    expect(typeof response.body).toBe("string");
  };

  await handler.hello(event, context, callback);
});
</code></pre>
<p>We can run this command to start the offline server for a good development workflow:</p>
<pre><code>serverless offline start
</code></pre>
<p>This will start an offline server that you can use to make API requests and test all the endpoints.</p>
<p>I also like to add a script in the <code>package.json</code> file to make this easy to launch:</p>
<pre><code>  "scripts": {
  	"start": "serverless offline start",
    "lint": "node_modules/.bin/eslint .",
    "test": "NODE_ENV=test node_modules/.bin/mocha --recursive --require babel-core/register"
  },
</code></pre>
<h3 id="add-eslint"><a aria-hidden="true" tabindex="-1" href="#add-eslint"><a href="#add-eslint" style="margin-right: 10px">#</a></a>Add ESLint</h3>
<p>I always work with a linter these days, there's no better way to keep clean code and enforce best practices with a language like javascript where its so easy to write messy and ugly code.</p>
<p>Lets add <code>eslint</code> and some plugins:</p>
<pre><code>, yarn add --dev eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-mocha eslint-plugin-promise
</code></pre>
<p>And then make a new <code>.eslintrc.json</code> file in the root of our project.</p>
<pre><code>touch .eslintrc.json
</code></pre>
<p>And add this to the new file:</p>
<pre><code>{
  "extends": ["airbnb/base", "plugin:promise/recommended"],
  "plugins": ["promise"],
  "rules": {}
}
</code></pre>
<p>Add a <code>.eslintignore</code> file:.</p>
<pre><code>touch .eslintignore
</code></pre>
<p>And ignore the webpack config:</p>
<pre><code># .eslintignore

webpack.config.js
</code></pre>
<p>And then add a <code>lint</code> script to our <code>package.json</code>:</p>
<pre><code>  "scripts": {
  	"start": "serverless offline start",
    "lint": "node_modules/.bin/eslint .",
  },
</code></pre>
<p>Then you can run the linter with this command:</p>
<pre><code>yarn lint
# or 
npm run lint
</code></pre>
<h3 id="api-folder-structure"><a aria-hidden="true" tabindex="-1" href="#api-folder-structure"><a href="#api-folder-structure" style="margin-right: 10px">#</a></a>API Folder Structure</h3>
<p>When I'm building a serverless api I like to give my functions, paths, and folder a api-like structure. So I'll create some directories to organize my handlers. This may be a bit overkill for small projects, but I dont think there are any downsides of having this kind of extra organization right off the bat.</p>
<pre><code>mkdir -p handlers/api/v1/todos
</code></pre>
<p>I think you can think of these handlers as controllers, and so if you're building CRUD endpoints for a model, you can add a different file for each of the 5 main API actions:</p>
<pre><code>touch handlers/api/v1/todos/index.js
touch handlers/api/v1/todos/show.js
touch handlers/api/v1/todos/create.js
touch handlers/api/v1/todos/update.js
touch handlers/api/v1/todos/delete.js
</code></pre>
<p>Then the functions part of your <code>serverless.yml</code> file would look something like this:</p>
<pre><code>functions:
  api/v1/todos/index:
    handler: handlers/api/v1/todos/index.default
    events:
      - http:
          path: api/v1/todos
          method: get
  api/v1/todos/show:
    handler: handlers/api/v1/todos/show.default
    events:
      - http:
          path: api/v1/todos/{id}
          method: get
  api/v1/todos/create:
    handler: handlers/api/v1/todos/create.default
    events:
      - http:
          path: api/v1/todos
          method: post
  api/v1/todos/update:
    handler: handlers/api/v1/todos/update.default
    events:
      - http:
          path: api/v1/todos/{id}
          method: put
  api/v1/todos/delete:
    handler: handlers/api/v1/todos/delete.default
    events:
      - http:
          path: api/v1/todos/{id}
          method: delete
</code></pre>
<p>As you can see this is a pretty typical REST setup.</p>
<p>We can now remove our original handler.js file since we dont need it anymore:</p>
<pre><code>rm handler.js
</code></pre>
<p>We wont be using this today, but lets also create a <code>models</code> folder where I can put our models:</p>
<pre><code>mkdir models
touch models/todo.js
</code></pre>
<p>Then the individual handlers will include the models to handle the crud operations.</p>
<p>Now I'm going to add a basic handler for <code>todos/index.js</code> so we have something to test:</p>
<pre><code># handlers/api/v1/index.js

export default (event, context, callback) => {
  const response = {
    statusCode: 200,
    body: JSON.stringify({
      message: 'Hello from todos/index',
    }),
  };

  callback(null, response);
};
</code></pre>
<p>And if you are following along, you'll have to add an export to all the handler files in order to run the offline server.</p>
<h3 id="setup-testing"><a aria-hidden="true" tabindex="-1" href="#setup-testing"><a href="#setup-testing" style="margin-right: 10px">#</a></a>Setup Testing</h3>
<p>By default the starter comes with <code>jest</code> but I prefer <code>mocha</code> so lets swap <code>jest</code> for <code>mocha</code> and add a bit of <code>chai</code> for the assertions.</p>
<pre><code>mv tests test
rm test/handler.test.js
yarn remove --dev jest
yarn add --dev mocha chai
touch test/test_helper.js
</code></pre>
<p>Now lets add some test files for our endpoints:</p>
<pre><code>mkdir -p test/api/v1/todos/
touch test/api/v1/todos/index.test.js
touch test/api/v1/todos/show.test.js
touch test/api/v1/todos/create.test.js
touch test/api/v1/todos/update.test.js
touch test/api/v1/todos/delete.test.js
</code></pre>
<p>And we'll only add 1 test for now for our <code>todos/index</code> handler:</p>
<pre><code>import { expect } from 'chai';

import todosIndex from '../../../../handlers/api/v1/todos';

describe('Fetching list of todos', () => {
  it('returns a valid response', (done) => {
    const event = 'event';
    const context = 'context';
    const callback = (error, response) => {
      expect(response.statusCode).to.equal(200);
      expect(typeof response.body).to.equal('string');
      expect(response.body).to.contain('Hello from todos/index');
      done();
    };

    todosIndex(event, context, callback);
  });
});
</code></pre>
<p>Then we can run it by first adding this script to our <code>package.json</code> file:</p>
<pre><code>  "scripts": {
  	"start": "serverless offline start",
    "lint": "node_modules/.bin/eslint .",
    "test": "NODE_ENV=test node_modules/.bin/mocha --recursive --require babel-core/register"
  },
</code></pre>
<p>We have to add the <code>--recursive</code> tag so it will find the tests in our subfolders, and the <code>--require babel-core/register</code> tag to make ES7 work with our tests.</p>
<p>Then we can run our tests with the command:</p>
<pre><code>yarn test
# or
npm test
</code></pre>
<p>Now we also need a different <code>.eslintrc.json</code> file for our testing so if we put a new one in our test tile the tests will play by different eslint rules.</p>
<pre><code>touch test/.eslintrc.json
</code></pre>
<p>With these contents so it will ignore mocha keywords:</p>
<pre><code>{
  "extends": ["airbnb/base", "plugin:promise/recommended"],
  "plugins": ["promise", "mocha"],
  "env": {
    "mocha": true
  },
  "rules": {}
}
</code></pre>
<h3 id="wrap-it-up"><a aria-hidden="true" tabindex="-1" href="#wrap-it-up"><a href="#wrap-it-up" style="margin-right: 10px">#</a></a>Wrap it up</h3>
<p>Now we can start our offline server:</p>
<pre><code>serverless offline start
</code></pre>
<p>We can test our code:</p>
<pre><code>yarn test
# or
npm test
</code></pre>
<p>...and we can lint our code:</p>
<pre><code>yarn lint
# or
npm run lint
</code></pre>
<p>And we have some good folder structure to start building our API.</p>
<p>Thanks for reading, I hope this can be of help to someone.</p>
<p>As always if you notice anything I did that could be improved, please reach out. I'm always looking to improve.</p>a:["$","div",null,{"className":"sm:px-8 post mt-16 lg:mt-32","children":["$","div",null,{"className":"mx-auto w-full max-w-7xl lg:px-8","children":["$","div",null,{"className":"relative px-4 sm:px-8 lg:px-12","children":["$","div",null,{"className":"mx-auto max-w-2xl lg:max-w-5xl","children":["$","div",null,{"className":"xl:relative","children":["$","div",null,{"className":"mx-auto max-w-2xl","children":["$","article",null,{"children":[["$","header",null,{"className":"flex flex-col","children":[["$","h1",null,{"className":"text-4xl font-bold font-bold tracking-tight sm:text-5xl","children":"Robust Serverless API Boilerplate with ES6, Folder Structure, Testing (Mocha + Chai), and ESLint"}],["$","div",null,{"className":"flex gap-3 pt-1","children":[["$","time",null,{"dateTime":"2018-08-25","className":"text-muted-foreground order-first flex items-center pr-2 text-base","children":[["$","span",null,{"className":"h-4 w-0.5 rounded-full bg-zinc-200 dark:bg-zinc-500"}],["$","span",null,{"className":"ml-3","children":"August 25, 2018"}]]}],["$","span",null,{"className":"text-muted-foreground","children":"-"}],[["$","span","serverless",{"className":"text-muted-foreground/80","children":"serverless"}],["$","span","eslint",{"className":"text-muted-foreground/80","children":"eslint"}],["$","span","javascript",{"className":"text-muted-foreground/80","children":"javascript"}],["$","span","es6",{"className":"text-muted-foreground/80","children":"es6"}]]]}],["$","div",null,{"className":"text-accent-foreground pt-3 text-sm italic","children":["~","7 min read"]}]]}],["$","div",null,{"className":"mt-8 prose dark:prose-invert","data-mdx-content":true,"children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$b"}}]}]]}]}]}]}]}]}]}]
3:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Robust Serverless API Boilerplate with ES6, Folder Structure, Testing (Mocha + Chai), and ESLint - Spencer Sharp"}],["$","meta","3",{"name":"description","content":"I’m Spencer, a software designer and entrepreneur based in New York City. I’m the founder and CEO of Planetaria, where we develop technologies that empower regular people to explore space on their own terms."}],["$","link","4",{"rel":"alternate","type":"application/rss+xml","href":"undefined/feed.xml"}]]
9:null
